name: Build and deploy .NET Core application
on:
  push:
    branches:
      - main

env:
  AZURE_WEBAPP_NAME: levanhiep409159
  AZURE_WEBAPP_PACKAGE_PATH: App.Frontend\published
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY: ./src/App.Frontend
  GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

jobs:
  build:
    environment: Production
    strategy:
      matrix:
        os: [windows-latest]
    name: build-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    
    if: "contains(github.event.head_commit.message, 'deploy app.frontend.service')"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate new tag
        run: |
          VERSION_PREFIX="v"
          VERSION_MAJOR_MINOR="1.0"
          VERSION_PATCH=$(git tag --list "${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.*" --sort=-version:refname | head -n 1 | grep -oE '[0-9]+$')
          if [ -z "$VERSION_PATCH" ]; then
            VERSION_PATCH=0
          else
            VERSION_PATCH=$((VERSION_PATCH + 1))
          fi
          NEW_TAG="${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.${VERSION_PATCH}"
          echo "Generated new tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        shell: bash
            
      - name: Push Git Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          
       # we build, test, and deploy steps here  

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
          include-prerelease: true

      - name: Restore Dependencies
        run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
      - name: Build
        run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Test
        run: dotnet test "${{ env.WORKING_DIRECTORY }}" --no-build

      - name: Publish
        run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: webapp-dotnet-version-${{ env.DOTNET_CORE_VERSION }}
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
  deploy:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: webapp-dotnet-version-${{ env.DOTNET_CORE_VERSION }}
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.LEVANHIEP409159_8286 }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
