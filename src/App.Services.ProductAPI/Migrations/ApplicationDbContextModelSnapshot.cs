// <auto-generated />
using App.Services.ProductAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Services.ProductAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Services.ProductAPI.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "Apple"
                        });
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Smartphone"
                        });
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green"
                        });
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageLocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("SizeId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "IP13MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 13 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP14MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 14 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP15MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 15 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP16MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 16 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP17MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 17 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP18MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 18 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP19MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 19 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP20MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 20 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP21MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 21 Mini",
                            Price = 999m,
                            SizeId = 1
                        },
                        new
                        {
                            Id = "IP22MiniBK128GB",
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            ImageUrl = "https://placehold.co/603x403",
                            Name = "iPhone 22 Mini",
                            Price = 999m,
                            SizeId = 1
                        });
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RAM = "128GB"
                        },
                        new
                        {
                            Id = 2,
                            RAM = "256GB"
                        },
                        new
                        {
                            Id = 3,
                            RAM = "512GB"
                        },
                        new
                        {
                            Id = 4,
                            RAM = "1T"
                        });
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Product", b =>
                {
                    b.HasOne("App.Services.ProductAPI.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Services.ProductAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Services.ProductAPI.Models.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Services.ProductAPI.Models.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Services.ProductAPI.Models.Size", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
